---
title: "ZAD 1 - Prognoza O3 z użyciem tidyverse"
author: "Jakub Ciura"
format: 
  html:
    theme: minty            
    toc: true                 
    toc-depth: 2              
    code-fold: true           
    code-tools: true          
    number-sections: true     
    font:                     
      text: "Lato"            
      code: "Fira Code"       
      heading: "Roboto"       
    page-layout: full        
editor_options: 
  chunk_output_type: console
abstract: |
  Modelowanie poziomu ozonu (O3) na podstawie danych `airquality`. W ramach projektu dane zostały przygotowane i przetworzone przy użyciu pakietu `tidyverse`, a następnie zbudowano model regresji liniowej na podstawie przekształconych zmiennych.
execute:
  echo: true                 
  warning: false             
  message: false             
---

```{=html}
<!-- yaml - proszę poprawić. 
MRZ: Pan chyba stworzył wiele gałęzi, wiele zadań, ale głównym repo jest niewiele bo nie ma `pull requests`. Patrzę na pana repo i widę wiele `branch` otwrtych a nie scalonych. WYmga silnje ingerencji. 
-->
```
## Treść

Opracuj model prognoz O3 na podstawie zestawu danych airquality. Następnie wykonaj prognozę dla dowolnego zestawu danych. sprawdzić czy miesiące mają wpływ na prognozę. Usuń braki danych. Zastanów się jak przekształcić zmienne. Nie uwzględniaj zmiennej day w prognozach. Nie uwzględniaj interakcji między zmiennymi. W celu podglądnięcia danych zastosuj funkcje pakietu gggally. Zastosuj tylko metodę najmniejszych kwadratów.

Zacznij od przygotowania danych, zastanów się co tu robimy. Opisz w komentarzach poszczególne kroki korzystając z systemu pomocy R."

## Realizację zadania rozpoczynamy od załadowania potrzebnych bibliotek.

```{r}
#| echo: true
#| results: "hide"
#| message: false
#| style:

library(tidyverse)
library(dplyr)
library(GGally)
```

## Wprowadzamy dane bazowe, które przetwarzamy w sposób ułatwiający ich dalszą konwersje.

```{r}

colnames(airquality) <- tolower(colnames(airquality))

air <-
  airquality |>
  as_tibble() |>
  na.omit() |> 
  select(-day) |> 
  mutate(month = factor(month)) 


head(air)
```

## Wizualizujemy zależności pomiędzy zmiennymi.

```{r}
#| message: false

ggpairs(air)
```

## Skalujemy zmienne temp, wind, solar.r.

Obserwujemy przekształcone dane.

```{r}

air_scaled <- air |> 
  mutate(across(c(temp, wind, solar.r), scale))

head(air_scaled)


```

## Budujemy model regresji liniowej na podstawie przeskalowanych zmiennych.

Czy to jest najlepszy model ? np.:

```{r}

model <- lm(ozone ~ temp + wind * solar.r, data = air_scaled)
```

## Wyświetlamy podsumowanie modelu.

```{r}
summary(model)
```

```{r}
library(broom)
library(GGally)

model |> 
  tidy() |> 
  mutate(p.stars = signif_stars(p.value)) 
```

## Na podstawie opracowanego modelu prognozujemy nowe dane.

```{r}

predictions <- predict(model, newdata = air_scaled)
head(predictions)
```

## Przeprowadzamy ocenę modelu.

Do realizacji tego zadania używamy narzędzi dostępnych w pakiecie yardstick.

```{r}
library(yardstick)
# Tworzymy ramkę danych z rzeczywistymi i przewidywanymi wartościami
results <- air_scaled %>%
  mutate(predicted_ozone = predictions)

metrics <- results %>%
  yardstick::metrics(truth = ozone, estimate = predicted_ozone)

metrics
```
